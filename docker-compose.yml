services:
  postgres:
    image: postgres:15-alpine
    container_name: weddingplanner_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: 
      context: ./backend/fastapi
      dockerfile: Dockerfile
    container_name: weddingplanner_api
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend/fastapi:/app
    ports:
      - "8000:8000"
    environment:
      # Configurações do Projeto
      - PROJECT_NAME=${PROJECT_NAME}
      - VERSION=${VERSION}
      - API_V1_STR=${API_V1_STR}
      
      # Configurações do Banco de Dados
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      
      # Configurações de Segurança
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      
      # Configurações do Primeiro Usuário Admin
      - FIRST_SUPERUSER=${FIRST_SUPERUSER}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
      
      # Configurações de CORS
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data: 